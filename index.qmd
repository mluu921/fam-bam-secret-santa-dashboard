---
title: 'FAM BAM Secret Santa'
format:
  dashboard:
    scrolling: true
    theme: simplex
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(gt)
library(networkD3)
library(pins)

board <- pins::board_folder('board')

data <- pins::pin_read(board, 'processed-data')

data <- data |> drop_na()

create_network_viz <- \(data, link_distance, charge) {
  
  nodes <- data.frame(name = unique(c(data$participants_giver, data$participants_receiver)))  |>
    mutate(Group = row_number())

  links <- data |>
    mutate(
      source = match(participants_giver, nodes$name) - 1,
      target = match(participants_receiver, nodes$name) - 1,
      value = 1
    ) |> as.data.frame()

  forceNetwork(
    Links = links,
    Nodes = nodes,
    Source = "source",
    Target = "target",
    NodeID = "name",
    Group = "name",
    Value = 'value',
    opacity = .9,
    zoom = TRUE,
    fontSize = 15,
    opacityNoHover = .5,
    linkWidth = 1,
    charge = charge,
    arrows = FALSE,
    linkDistance = link_distance
  )
  
}


```

# Home

## 
```{r}
#| expandable: true
#| title: What are the odds of matching based on surname ?
out <- pins::pin_read(board, 'sims-plot-prob-last-name')

out
```

##
```{r}
#| expandable: true
#| title: Who has matched with who?

create_network_viz(data, link_distance = 150, charge = -200)
```

##
```{r}
#| expandable: true
#| title: Which year had the most participants?

local({
  plot_data <- data |>
    group_by(year) |>
    summarise(n = n())
  
  plot_data <- plot_data |>
    mutate(color = ifelse(n == max(plot_data$n), 'red', 'grey90'))
  
  p <- ggplot(plot_data, aes(x = year, y = n, fill = color)) +
    geom_col() +
    scale_fill_identity() +
    theme_minimal(base_size = 15) +
    theme(panel.grid = element_blank(), legend.position = 'none') +
    scale_y_continuous(breaks = seq(0, max(plot_data$n), by = 1)) +
    labs(x = 'Year', y = 'Number of Participants')
  
  plotly::ggplotly(p)
})

```


```{r}
#| results: asis

data |>
  group_nest(year) |>
  mutate(year = as.numeric(year)) |>
  arrange(desc(year)) |>
  mutate(year = as_factor(year)) |>
  deframe() |>
  imap_chr(\(data, title) {
    knitr::knit_child(
      'child-dashboard-page.qmd',
      envir = environment(),
      quiet = TRUE
    )
    
    
  }) |> cat(sep = '\n')

```

